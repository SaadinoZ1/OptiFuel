// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OptiFuel.Data;

#nullable disable

namespace OptiFuel.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240722115252_Second")]
    partial class Second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OptiFuel.Models.BonDeLivraison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BLFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.Property<int>("QuantitésLivrée")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId")
                        .IsUnique();

                    b.ToTable("BonDeLivraison");
                });

            modelBuilder.Entity("OptiFuel.Models.Certificat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificatFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateUpload")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId")
                        .IsUnique();

                    b.ToTable("Certificat");
                });

            modelBuilder.Entity("OptiFuel.Models.Planning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantiteALivrer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Planings");
                });

            modelBuilder.Entity("OptiFuel.Models.BonDeLivraison", b =>
                {
                    b.HasOne("OptiFuel.Models.Planning", "Planning")
                        .WithOne("BonDeLivraison")
                        .HasForeignKey("OptiFuel.Models.BonDeLivraison", "PlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planning");
                });

            modelBuilder.Entity("OptiFuel.Models.Certificat", b =>
                {
                    b.HasOne("OptiFuel.Models.Planning", "Planning")
                        .WithOne("Certificat")
                        .HasForeignKey("OptiFuel.Models.Certificat", "PlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planning");
                });

            modelBuilder.Entity("OptiFuel.Models.Planning", b =>
                {
                    b.Navigation("BonDeLivraison")
                        .IsRequired();

                    b.Navigation("Certificat")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
